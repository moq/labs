<Project InitialTargets="FixupProjectReferences">
  <Import Project="PackageReferences.targets" />
  <Import Project="Version.targets" />
  <Import Project="Packaging.targets" Condition="'$(MSBuildProjectExtension)' == '.nuproj'" />

  <ItemGroup>
    <PackageReference Update="NETStandard.Library" PrivateAssets="all" />
  </ItemGroup>

  <!-- For some reason, SDK-style P2P references are being resolved *after* ResolveAssemblyReferences and failing the build -->
	<Target Name="FixupProjectReferences">
		<PropertyGroup>
			<ResolveAssemblyReferencesDependsOn>
				$(ResolveAssemblyReferencesDependsOn);
				ResolveProjectReferences
			</ResolveAssemblyReferencesDependsOn>
		</PropertyGroup>
	</Target>

  <!-- We get the 1.1.0 Microsoft.CodeAnalyis.Analyzers automatically, and those slow down and sometimes fail, so turn off. -->
  <Target Name="RemoveResolvedAnalyzers" BeforeTargets="ResolveLockFileAnalyzers">
    <ItemGroup>
      <ResolvedAnalyzers Remove="@(ResolvedAnalyzers)" />
    </ItemGroup>
  </Target>

  <!-- If a package is produced, copy it to %temp%\packages so it can be easily tested locally 
       This deletes any restored packages with the matching id, so that wildcard references 
       will automatically pick up this newest package.
  -->
  <Target Name="LocalPublish" Condition="'$(CI)' != 'true'" AfterTargets="Pack">
    <Exec Command='rd "$(NuGetPackageRoot)$(PackageId.ToLowerInvariant())" /q /s' Condition="Exists('$(NuGetPackageRoot)$(PackageId.ToLowerInvariant())')" />

    <ItemGroup>
      <_ToDelete Include="$(TEMP)\packages\$(PackageId)*.nupkg" />
      <ToDelete Include="@(_ToDelete)" 
                Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(Filename)', '$(PackageId)\.\d+\.\d+\.\d+\.*'))" />
    </ItemGroup>
    <Delete Files="@(ToDelete)" />

    <MakeDir Directories="$(TEMP)\packages" Condition="!Exists('$(TEMP)\packages')" />
    <Copy SourceFiles="$(PackageTargetPath)" DestinationFolder="$(TEMP)\packages" />
  </Target>

  <!-- IsTestProject is set by xunit  -->
  <Import Project="Settings.Tests.targets" Condition="'$(IsTestProject)' == 'true'" />

  <!-- Import [project].targets if it exists -->
	<Import Project="$(MSBuildProjectDirectory)\$(MSBuildProjectName).targets"
          Condition="'$(MSBuildProjectExtension)' != '.targets' And Exists('$(MSBuildProjectDirectory)\$(MSBuildProjectName).targets')" />
</Project>